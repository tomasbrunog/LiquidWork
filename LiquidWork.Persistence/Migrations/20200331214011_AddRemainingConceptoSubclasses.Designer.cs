// <auto-generated />
using System;
using LiquidWork.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LiquidWork.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200331214011_AddRemainingConceptoSubclasses")]
    partial class AddRemainingConceptoSubclasses
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LiquidWork.Core.Model.Concepto", b =>
                {
                    b.Property<int>("ConceptoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodigoConcepto")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LegajoId")
                        .HasColumnType("int");

                    b.Property<int?>("LiquidacionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal (9,2)");

                    b.Property<int>("Precedencia")
                        .HasColumnType("int");

                    b.Property<int>("TipoConcepto")
                        .HasColumnType("int");

                    b.Property<double>("Unidad")
                        .HasColumnType("float");

                    b.HasKey("ConceptoId");

                    b.HasIndex("LegajoId");

                    b.HasIndex("LiquidacionId");

                    b.ToTable("Conceptos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Concepto");
                });

            modelBuilder.Entity("LiquidWork.Core.Model.Legajo", b =>
                {
                    b.Property<int>("LegajoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("CUIL")
                        .HasColumnType("bigint");

                    b.Property<string>("Categoria")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("NumeroLegajo")
                        .HasColumnType("int");

                    b.HasKey("LegajoId");

                    b.ToTable("Legajos");
                });

            modelBuilder.Entity("LiquidWork.Core.Model.Liquidacion", b =>
                {
                    b.Property<int>("LiquidacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LegajoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Neto")
                        .HasColumnType("decimal (9,2)");

                    b.Property<DateTime>("Periodo")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalDeducciones")
                        .HasColumnType("decimal (9,2)");

                    b.Property<decimal>("TotalNoRemunerativo")
                        .HasColumnType("decimal (9,2)");

                    b.Property<decimal>("TotalRemunerativo")
                        .HasColumnType("decimal (9,2)");

                    b.HasKey("LiquidacionId");

                    b.HasIndex("LegajoId");

                    b.ToTable("Liquidaciones");
                });

            modelBuilder.Entity("LiquidWork.Core.Model.Antiguedad", b =>
                {
                    b.HasBaseType("LiquidWork.Core.Model.Concepto");

                    b.HasDiscriminator().HasValue("Antiguedad");
                });

            modelBuilder.Entity("LiquidWork.Core.Model.FaltasInjustificadas", b =>
                {
                    b.HasBaseType("LiquidWork.Core.Model.Concepto");

                    b.HasDiscriminator().HasValue("FaltasInjustificadas");
                });

            modelBuilder.Entity("LiquidWork.Core.Model.Feriado", b =>
                {
                    b.HasBaseType("LiquidWork.Core.Model.Concepto");

                    b.HasDiscriminator().HasValue("Feriado");
                });

            modelBuilder.Entity("LiquidWork.Core.Model.HorasExtra", b =>
                {
                    b.HasBaseType("LiquidWork.Core.Model.Concepto");

                    b.HasDiscriminator().HasValue("HorasExtra");
                });

            modelBuilder.Entity("LiquidWork.Core.Model.Jubilacion", b =>
                {
                    b.HasBaseType("LiquidWork.Core.Model.Concepto");

                    b.HasDiscriminator().HasValue("Jubilacion");
                });

            modelBuilder.Entity("LiquidWork.Core.Model.ObraSocial", b =>
                {
                    b.HasBaseType("LiquidWork.Core.Model.Concepto");

                    b.HasDiscriminator().HasValue("ObraSocial");
                });

            modelBuilder.Entity("LiquidWork.Core.Model.Pami", b =>
                {
                    b.HasBaseType("LiquidWork.Core.Model.Concepto");

                    b.HasDiscriminator().HasValue("Pami");
                });

            modelBuilder.Entity("LiquidWork.Core.Model.Presentismo", b =>
                {
                    b.HasBaseType("LiquidWork.Core.Model.Concepto");

                    b.HasDiscriminator().HasValue("Presentismo");
                });

            modelBuilder.Entity("LiquidWork.Core.Model.Sindicato", b =>
                {
                    b.HasBaseType("LiquidWork.Core.Model.Concepto");

                    b.HasDiscriminator().HasValue("Sindicato");
                });

            modelBuilder.Entity("LiquidWork.Core.Model.SueldoBasico", b =>
                {
                    b.HasBaseType("LiquidWork.Core.Model.Concepto");

                    b.HasDiscriminator().HasValue("SueldoBasico");
                });

            modelBuilder.Entity("LiquidWork.Core.Model.Concepto", b =>
                {
                    b.HasOne("LiquidWork.Core.Model.Legajo", "Legajo")
                        .WithMany("ConceptosFijos")
                        .HasForeignKey("LegajoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiquidWork.Core.Model.Liquidacion", "Liquidacion")
                        .WithMany("Conceptos")
                        .HasForeignKey("LiquidacionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiquidWork.Core.Model.Liquidacion", b =>
                {
                    b.HasOne("LiquidWork.Core.Model.Legajo", "Legajo")
                        .WithMany("Liquidaciones")
                        .HasForeignKey("LegajoId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
